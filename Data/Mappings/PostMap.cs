using System.Collections;
using System.Collections.Generic;
using Blog.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Blog.Data.Mappings
{
  public class PostMap : IEntityTypeConfiguration<Post>
  {
    public void Configure(EntityTypeBuilder<Post> builder)
    {
      builder
      .ToTable("Post");

      builder
      .HasKey(p => p.Id);

      builder
      .Property(p => p.Id)
      .ValueGeneratedOnAdd()
      .UseIdentityColumn();

      builder
      .Property(p => p.CreateDate)
      .IsRequired()
      .HasDefaultValueSql("GETDATE()");

      builder
      .Property(p => p.LastUpdateDate)
      .IsRequired()
      .HasColumnName("LastUpdateDate")
      .HasColumnType("SMALLDATETIME")
      .HasDefaultValueSql("GETDATE()");
      //.HasDefaultValue(DateTime.UtcNow.ToUniversalTime()); // use that if the default values is generated by code

      // index
      builder
      .HasIndex(p => p.Slug, "IX_Post_Slug")
      .IsUnique();

      // relationalship 1X1
      builder
      .HasOne(p => p.Author)
      .WithMany(a => a.Posts)
      .HasConstraintName("FK_Post_Author")
      .OnDelete(DeleteBehavior.Cascade);

      builder
      .HasOne(p => p.Category)
      .WithMany(c => c.Posts)
      .HasConstraintName("FK_Post_Category")
      .OnDelete(DeleteBehavior.Cascade);


      // relationship XxX
      builder
      .HasMany(p => p.Tags)
      .WithMany(t => t.Posts)
      .UsingEntity<Dictionary<string, object>>(// this is a virtual table to handle that when has no table in database to handle it
        "PostTag", //table name
        post => post
                .HasOne<Tag>()
                .WithMany()
                .HasForeignKey("PostId")
                .HasConstraintName("FK_PostTag_PostId")
                .OnDelete(DeleteBehavior.Cascade),
        tag => tag
                .HasOne<Post>()
                .WithMany()
                .HasForeignKey("TagId")
                .HasConstraintName("FK_PostTag_TagId")
                .OnDelete(DeleteBehavior.Cascade)
      );
    }
  }
}